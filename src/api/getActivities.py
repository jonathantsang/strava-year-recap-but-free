import json
import os
import requests
import time
import datetime

from collections import Counter

from strava_constants import max_pagination, access_token

# testing to not get rate limited
max_pagination = 5

# Build the API url to get activities data
activities_url = f"https://www.strava.com/api/v3/athlete/activities?" \
          f"access_token={access_token}" \
          f"&per_page={max_pagination}"
print('RESTful API:', activities_url)

# Get the response in json format
response = requests.get(activities_url).json()

sport_type_counter = Counter()
start_date_local_counter = Counter()
timezone_counter = Counter()
start_latlng_counter = Counter()
embeds_counter = Counter()
country_counter = Counter()
state_counter = Counter()
city_counter = Counter()

for activity in response:
    sport_type_counter[activity["sport_type"]] += 1
    start_date_local_counter[activity["start_date_local"]] += 1
    timezone_counter[activity["timezone"]] += 1
    start_latlng_counter[tuple(activity["start_latlng"])] += 1
    # These are None right now
    country_counter[activity["location_country"]] += 1
    state_counter[activity["location_state"]] += 1
    city_counter[activity["location_city"]] += 1
    print(activity)

print("TYPE", sport_type_counter)
print("START DATE LOCAL", start_date_local_counter)
print("TIMEZONES", timezone_counter)
print("LATLNG", start_latlng_counter)
print("COUNTRY", country_counter)
print("STATE", state_counter)
print("CITY", city_counter)

# Find most active time of day bucket
# morning 4am-9am
# midday 9am-3pm
# evening 3pm-7pm
# night 7pm-4am
times = Counter()
for date_string in start_date_local_counter:
    original_date_string = date_string
    # this doesn't accept all valid ISO 8601 strings, only ones generated by isoformat
    date_string = date_string.replace("Z", "+00:00") # remove trailing Z
    time = datetime.datetime.fromisoformat(date_string)
    if 4 < time.hour <= 9:
        times["morning"] += start_date_local_counter[original_date_string]
    elif 9 < time.hour <= 15:
        times["midday"] += start_date_local_counter[original_date_string]
    elif 15 < time.hour <= 19:
        times["evening"] += start_date_local_counter[original_date_string]
    else:
        times["night"] += start_date_local_counter[original_date_string]

print(times)
